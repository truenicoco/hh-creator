name: Test and build
on: push

env:
  ARTIFACT_PREFIX: hh-creator-${{ github.ref_name }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # for the PyPI release
      contents: write  # for the GH release
    steps:
    - uses: astral-sh/setup-uv@v4
    - uses: actions/checkout@v4
    - name: Setup venv
      run: uv venv && uv pip install -e .

    - name: Run tests
      run: uv run --frozen pytest test

    # python package
    - name: Build PyPI package
      run: uv build
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_PREFIX }}-pypi
        path: dist
    - name: PyPI release
      if: startsWith(github.ref, 'refs/tags/v')
      run: uv publish

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install uv
      run: pip install uv

    - name: Setup venv and install dependencies
      run: |
        uv venv
        uv pip install -e .
        uv pip install pyinstaller
        uv pip uninstall pathlib

    - name: Export requirements for pyinstaller
      run: uv pip compile pyproject.toml -o pyinstaller/requirements.txt

    - name: Build with PyInstaller
      run: |
        .venv\Scripts\activate
        cd pyinstaller
        pyinstaller --clean -y --dist ./dist/windows --workpath /tmp hh-creator.spec

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_PREFIX }}-windows
        path: pyinstaller/dist

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4
    - name: Check what artifacts have been downloaded
      run: |
        ls -la
        ls -la ${{ env.ARTIFACT_PREFIX }}*
    - name: Github release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.ARTIFACT_PREFIX }}*
